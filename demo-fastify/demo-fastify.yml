AWSTemplateFormatVersion: 2010-09-09
Description: Demo Fastify Service

Parameters:
  stage:
    AllowedValues:
      - "dev"
    Type: String
    Default: "dev"
    Description: "Defines the target deployment environment and AWS account."
  serviceName:
    Type: String
    Default: "demo-fastify"
    Description: "The demo-fastify service."

Mappings:
  stages:
    dev:
      certificateArn: <CERT_ARN>
      certificateName: <CERT_NAME>
      domainName: <DOMAIN_NAME>
      lumigoTracerToken: <LUMIGO_TRACER_TOKEN>
      nodeEnv: development
      subdomainName: <SUBDOMAIN_NAME>
      subnetIds:
        - <SUBNET_IDS>
      vpcId: <VPC_ID>

Resources:
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: "internet-facing"
      Type: "application"
      Subnets: !FindInMap [stages, !Ref stage, subnetIds]
      SecurityGroups:
        - !Ref ALBSecurityGroup
      IpAddressType: "ipv4"
      LoadBalancerAttributes:
        - Key: "access_logs.s3.enabled"
          Value: "false"
        - Key: "idle_timeout.timeout_seconds"
          Value: "3600"
        - Key: "deletion_protection.enabled"
          Value: "false"
        - Key: "routing.http2.enabled"
          Value: "true"
        - Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"

  DemoFastifyDNS:
    Type: AWS::Route53::RecordSet
    DependsOn: LoadBalancer
    Properties:
      HostedZoneName: !FindInMap [stages, !Ref stage, domainName]
      Name: !FindInMap [stages, !Ref stage, subdomainName]
      Comment: DNS record for the demo-fastify load balancer.
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt "LoadBalancer.CanonicalHostedZoneID"
        DNSName: !GetAtt "LoadBalancer.DNSName"

  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Inbound and outbound traffic for the DemoFastify ALB."
      VpcId: !FindInMap [stages, !Ref stage, vpcId]
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80
          IpProtocol: "tcp"
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          ToPort: 443
          IpProtocol: "tcp"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 0
          ToPort: 65535
          IpProtocol: "tcp"

  HTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-2016-08"
      Certificates:
        - CertificateArn: !FindInMap [stages, !Ref stage, certificateArn]
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref DemoFastifyTasksTargetGroup
          Type: "forward"

  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Order: 1
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
          Type: "redirect"

  DemoFastifyTasksTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/status"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      TargetType: "ip"
      Matcher:
        HttpCode: "200"
      VpcId: !FindInMap [stages, !Ref stage, vpcId]
      HealthCheckEnabled: true
      TargetGroupAttributes:
        - Key: "stickiness.enabled"
          Value: "false"
        - Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        - Key: "stickiness.type"
          Value: "lb_cookie"
        - Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        - Key: "slow_start.duration_seconds"
          Value: "0"
        - Key: "load_balancing.algorithm.type"
          Value: "round_robin"

  Repository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Ref serviceName
      EncryptionConfiguration:
        EncryptionType: "KMS"
      ImageTagMutability: "MUTABLE"

  Cluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "${serviceName}-${stage}-cluster"

  Service:
    Type: "AWS::ECS::Service"
    DependsOn: HTTPSListener
    Properties:
      Cluster: !Ref Cluster
      ServiceName: !Sub "${serviceName}-${stage}-service"
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 60
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DesiredCount: 1
      LoadBalancers:
        - TargetGroupArn: !Ref DemoFastifyTasksTargetGroup
          ContainerName: !Ref serviceName
          ContainerPort: 8080
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets: !FindInMap [stages, !Ref stage, subnetIds]
      TaskDefinition: !Ref FargateTaskDefinition

  FargateTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/fargate-${AWS::StackName}"

  FargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref serviceName
      Cpu: 1024
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: !Ref serviceName
          Cpu: 1024
          Memory: 2048
          Image: !Sub
            - "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${tag}:latest"
            - tag: !Ref serviceName
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FargateTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: LUMIGO_TRACER_TOKEN
              Value: !FindInMap [stages, !Ref stage, lumigoTracerToken]
            - Name: OTEL_SERVICE_NAME
              Value: !Sub "demo-fastify-${stage}-service"

            - Name: NODE_OPTIONS
              Value: "--max_old_space_size=4096"
            - Name: NODE_ENV
              Value: !FindInMap [stages, !Ref stage, nodeEnv]

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Access to the Fargate containers"
      VpcId: !FindInMap [stages, !Ref stage, vpcId]
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0" # should only be the loadbalancer
          FromPort: 8080
          ToPort: 8080
          IpProtocol: "tcp"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 0
          ToPort: 65535
          IpProtocol: "tcp"

  # This is a role which is used by the ECS tasks themselves.
  # Permissions for task logs and repository access for the images.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  # This is a role which is used by the code within tasks.
  # The aws-sdk will be configured with the credentials associated with this role.
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: DemoFastifyECSTaskRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
